/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dnebinger.subsystem.events.model.impl;

import com.dnebinger.subsystem.events.model.Event;
import com.dnebinger.subsystem.events.model.EventModel;
import com.dnebinger.subsystem.events.model.EventSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Event service. Represents a row in the &quot;SUBSYS_Event&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EventModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EventImpl
 * @generated
 */
@JSON(strict = true)
public class EventModelImpl extends BaseModelImpl<Event> implements EventModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a event model instance should use the <code>Event</code> interface instead.
	 */
	public static final String TABLE_NAME = "SUBSYS_Event";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"eventId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"occursOn", Types.TIMESTAMP},
		{"endsOn", Types.TIMESTAMP}, {"adultOnly", Types.BOOLEAN},
		{"maxOccupants", Types.INTEGER}, {"description", Types.VARCHAR},
		{"floor", Types.INTEGER}, {"room", Types.VARCHAR},
		{"organizer", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("occursOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endsOn", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("adultOnly", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("maxOccupants", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("floor", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("room", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizer", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SUBSYS_Event (uuid_ VARCHAR(75) null,eventId LONG not null primary key,name VARCHAR(75) null,occursOn DATE null,endsOn DATE null,adultOnly BOOLEAN,maxOccupants INTEGER,description VARCHAR(75) null,floor INTEGER,room VARCHAR(75) null,organizer LONG)";

	public static final String TABLE_SQL_DROP = "drop table SUBSYS_Event";

	public static final String ORDER_BY_JPQL = " ORDER BY event.name ASC";

	public static final String ORDER_BY_SQL = " ORDER BY SUBSYS_Event.name ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean ENTITY_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean FINDER_CACHE_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static final boolean COLUMN_BITMASK_ENABLED = true;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long NAME_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static Event toModel(EventSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Event model = new EventImpl();

		model.setUuid(soapModel.getUuid());
		model.setEventId(soapModel.getEventId());
		model.setName(soapModel.getName());
		model.setOccursOn(soapModel.getOccursOn());
		model.setEndsOn(soapModel.getEndsOn());
		model.setAdultOnly(soapModel.isAdultOnly());
		model.setMaxOccupants(soapModel.getMaxOccupants());
		model.setDescription(soapModel.getDescription());
		model.setFloor(soapModel.getFloor());
		model.setRoom(soapModel.getRoom());
		model.setOrganizer(soapModel.getOrganizer());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<Event> toModels(EventSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Event> models = new ArrayList<Event>(soapModels.length);

		for (EventSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		com.dnebinger.subsystem.events.service.util.ServiceProps.get(
			"lock.expiration.time.com.dnebinger.subsystem.events.model.Event"));

	public EventModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _eventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _eventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Event.class;
	}

	@Override
	public String getModelClassName() {
		return Event.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Event, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Event, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Event, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Event)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Event, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Event, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Event)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Event, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Event, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Event>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Event.class.getClassLoader(), Event.class, ModelWrapper.class);

		try {
			Constructor<Event> constructor =
				(Constructor<Event>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Event, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Event, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Event, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Event, Object>>();
		Map<String, BiConsumer<Event, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Event, ?>>();

		attributeGetterFunctions.put("uuid", Event::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Event, String>)Event::setUuid);
		attributeGetterFunctions.put("eventId", Event::getEventId);
		attributeSetterBiConsumers.put(
			"eventId", (BiConsumer<Event, Long>)Event::setEventId);
		attributeGetterFunctions.put("name", Event::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Event, String>)Event::setName);
		attributeGetterFunctions.put("occursOn", Event::getOccursOn);
		attributeSetterBiConsumers.put(
			"occursOn", (BiConsumer<Event, Date>)Event::setOccursOn);
		attributeGetterFunctions.put("endsOn", Event::getEndsOn);
		attributeSetterBiConsumers.put(
			"endsOn", (BiConsumer<Event, Date>)Event::setEndsOn);
		attributeGetterFunctions.put("adultOnly", Event::getAdultOnly);
		attributeSetterBiConsumers.put(
			"adultOnly", (BiConsumer<Event, Boolean>)Event::setAdultOnly);
		attributeGetterFunctions.put("maxOccupants", Event::getMaxOccupants);
		attributeSetterBiConsumers.put(
			"maxOccupants", (BiConsumer<Event, Integer>)Event::setMaxOccupants);
		attributeGetterFunctions.put("description", Event::getDescription);
		attributeSetterBiConsumers.put(
			"description", (BiConsumer<Event, String>)Event::setDescription);
		attributeGetterFunctions.put("floor", Event::getFloor);
		attributeSetterBiConsumers.put(
			"floor", (BiConsumer<Event, Integer>)Event::setFloor);
		attributeGetterFunctions.put("room", Event::getRoom);
		attributeSetterBiConsumers.put(
			"room", (BiConsumer<Event, String>)Event::setRoom);
		attributeGetterFunctions.put("organizer", Event::getOrganizer);
		attributeSetterBiConsumers.put(
			"organizer", (BiConsumer<Event, Long>)Event::setOrganizer);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_eventId = eventId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalName() {
		return getColumnOriginalValue("name");
	}

	@JSON
	@Override
	public Date getOccursOn() {
		return _occursOn;
	}

	@Override
	public void setOccursOn(Date occursOn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_occursOn = occursOn;
	}

	@JSON
	@Override
	public Date getEndsOn() {
		return _endsOn;
	}

	@Override
	public void setEndsOn(Date endsOn) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endsOn = endsOn;
	}

	@JSON
	@Override
	public boolean getAdultOnly() {
		return _adultOnly;
	}

	@JSON
	@Override
	public boolean isAdultOnly() {
		return _adultOnly;
	}

	@Override
	public void setAdultOnly(boolean adultOnly) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_adultOnly = adultOnly;
	}

	@JSON
	@Override
	public int getMaxOccupants() {
		return _maxOccupants;
	}

	@Override
	public void setMaxOccupants(int maxOccupants) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maxOccupants = maxOccupants;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public int getFloor() {
		return _floor;
	}

	@Override
	public void setFloor(int floor) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_floor = floor;
	}

	@JSON
	@Override
	public String getRoom() {
		if (_room == null) {
			return "";
		}
		else {
			return _room;
		}
	}

	@Override
	public void setRoom(String room) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_room = room;
	}

	@JSON
	@Override
	public long getOrganizer() {
		return _organizer;
	}

	@Override
	public void setOrganizer(long organizer) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizer = organizer;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (entry.getValue() != getColumnValue(entry.getKey())) {
				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Event.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Event toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Event>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EventImpl eventImpl = new EventImpl();

		eventImpl.setUuid(getUuid());
		eventImpl.setEventId(getEventId());
		eventImpl.setName(getName());
		eventImpl.setOccursOn(getOccursOn());
		eventImpl.setEndsOn(getEndsOn());
		eventImpl.setAdultOnly(isAdultOnly());
		eventImpl.setMaxOccupants(getMaxOccupants());
		eventImpl.setDescription(getDescription());
		eventImpl.setFloor(getFloor());
		eventImpl.setRoom(getRoom());
		eventImpl.setOrganizer(getOrganizer());

		eventImpl.resetOriginalValues();

		return eventImpl;
	}

	@Override
	public int compareTo(Event event) {
		int value = 0;

		value = getName().compareTo(event.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Event)) {
			return false;
		}

		Event event = (Event)object;

		long primaryKey = event.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Event> toCacheModel() {
		EventCacheModel eventCacheModel = new EventCacheModel();

		eventCacheModel.uuid = getUuid();

		String uuid = eventCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			eventCacheModel.uuid = null;
		}

		eventCacheModel.eventId = getEventId();

		eventCacheModel.name = getName();

		String name = eventCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			eventCacheModel.name = null;
		}

		Date occursOn = getOccursOn();

		if (occursOn != null) {
			eventCacheModel.occursOn = occursOn.getTime();
		}
		else {
			eventCacheModel.occursOn = Long.MIN_VALUE;
		}

		Date endsOn = getEndsOn();

		if (endsOn != null) {
			eventCacheModel.endsOn = endsOn.getTime();
		}
		else {
			eventCacheModel.endsOn = Long.MIN_VALUE;
		}

		eventCacheModel.adultOnly = isAdultOnly();

		eventCacheModel.maxOccupants = getMaxOccupants();

		eventCacheModel.description = getDescription();

		String description = eventCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			eventCacheModel.description = null;
		}

		eventCacheModel.floor = getFloor();

		eventCacheModel.room = getRoom();

		String room = eventCacheModel.room;

		if ((room != null) && (room.length() == 0)) {
			eventCacheModel.room = null;
		}

		eventCacheModel.organizer = getOrganizer();

		return eventCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Event, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Event, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Event, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Event)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Event, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Event, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Event, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Event)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Event>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private long _eventId;
	private String _name;
	private Date _occursOn;
	private Date _endsOn;
	private boolean _adultOnly;
	private int _maxOccupants;
	private String _description;
	private int _floor;
	private String _room;
	private long _organizer;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Event, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Event)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("eventId", _eventId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("occursOn", _occursOn);
		_columnOriginalValues.put("endsOn", _endsOn);
		_columnOriginalValues.put("adultOnly", _adultOnly);
		_columnOriginalValues.put("maxOccupants", _maxOccupants);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("floor", _floor);
		_columnOriginalValues.put("room", _room);
		_columnOriginalValues.put("organizer", _organizer);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("eventId", 2L);

		columnBitmasks.put("name", 4L);

		columnBitmasks.put("occursOn", 8L);

		columnBitmasks.put("endsOn", 16L);

		columnBitmasks.put("adultOnly", 32L);

		columnBitmasks.put("maxOccupants", 64L);

		columnBitmasks.put("description", 128L);

		columnBitmasks.put("floor", 256L);

		columnBitmasks.put("room", 512L);

		columnBitmasks.put("organizer", 1024L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Event _escapedModel;

}